# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\jumen\Documents\Codes\python\Graph-generator\graphui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from matplotlib.figure import Figure
from PyQt5 import QtCore, QtWidgets
import matplotlib.pyplot as plt
import matplotlib as mpl
from PyQt5 import QtCore, QtGui, QtWidgets
import numpy as np
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from PyQt5.QtWidgets import QApplication, QVBoxLayout, QWidget
import sys
import matplotlib
matplotlib.use('Qt5Agg')


class MplCanvas(FigureCanvasQTAgg):

    def __init__(self, parent=None, width=5, height=4, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)
        super(MplCanvas, self).__init__(fig)


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(339, 327)
        MainWindow.setStyleSheet("background-color: rgb(31, 31, 31);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frameC = QtWidgets.QFrame(self.centralwidget)
        self.frameC.setStyleSheet("color: rgb(255, 255, 255);")
        self.frameC.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameC.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameC.setObjectName("frameC")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frameC)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.textC = QtWidgets.QLabel(self.frameC)
        self.textC.setObjectName("textC")
        self.horizontalLayout.addWidget(self.textC, 0, QtCore.Qt.AlignHCenter)
        self.gridLayout.addWidget(self.frameC, 2, 4, 1, 1)
        self.xquadrado = QtWidgets.QLabel(self.centralwidget)
        self.xquadrado.setStyleSheet("color: rgb(255, 255, 255);")
        self.xquadrado.setObjectName("xquadrado")
        self.gridLayout.addWidget(self.xquadrado, 3, 1, 1, 1)
        self.boxB = QtWidgets.QLineEdit(self.centralwidget)
        self.boxB.setStyleSheet("background-color: rgb(89, 89, 89);")
        self.boxB.setObjectName("boxB")
        self.gridLayout.addWidget(self.boxB, 3, 2, 1, 1)
        self.ok = QtWidgets.QPushButton(self.centralwidget)
        self.ok.setMinimumSize(QtCore.QSize(60, 20))
        self.ok.setStyleSheet("QPushButton{\n"
                              "background-color: rgb(104,171,75); \n"
                              "color: rgb(0,0,0);\n"
                              "border-radius:5px;\n"
                              "}QPushButton::hover{\n"
                              "background-color: rgb(104,171,75); \n"
                              "color: rgb(255,255,255);\n"
                              "border-radius:5px;\n"
                              "}QPushButton::pressed{\n"
                              "background-color: rgb(154,231,125); \n"
                              "color: rgb(255,255,255);\n"
                              "border-radius:5px;\n"
                              "}")
        self.ok.setObjectName("ok")
        self.gridLayout.addWidget(self.ok, 3, 5, 1, 1)
        self.xmais = QtWidgets.QLabel(self.centralwidget)
        self.xmais.setStyleSheet("color: rgb(255, 255, 255);")
        self.xmais.setObjectName("xmais")
        self.gridLayout.addWidget(self.xmais, 3, 3, 1, 1)
        self.boxC = QtWidgets.QLineEdit(self.centralwidget)
        self.boxC.setStyleSheet("background-color: rgb(89, 89, 89);")
        self.boxC.setObjectName("boxC")
        self.gridLayout.addWidget(self.boxC, 3, 4, 1, 1)
        self.frameB = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.frameB.sizePolicy().hasHeightForWidth())
        self.frameB.setSizePolicy(sizePolicy)
        self.frameB.setStyleSheet("color: rgb(255, 255, 255);")
        self.frameB.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameB.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameB.setObjectName("frameB")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frameB)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.textB = QtWidgets.QLabel(self.frameB)
        self.textB.setObjectName("textB")
        self.horizontalLayout_2.addWidget(
            self.textB, 0, QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
        self.gridLayout.addWidget(self.frameB, 2, 2, 1, 1)
        self.frameA = QtWidgets.QFrame(self.centralwidget)
        self.frameA.setStyleSheet("color: rgb(255, 255, 255);")
        self.frameA.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameA.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameA.setObjectName("frameA")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frameA)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.textA = QtWidgets.QLabel(self.frameA)
        self.textA.setObjectName("textA")
        self.horizontalLayout_3.addWidget(
            self.textA, 0, QtCore.Qt.AlignHCenter)
        self.gridLayout.addWidget(self.frameA, 2, 0, 1, 1)
        self.tela = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(3)
        sizePolicy.setHeightForWidth(
            self.tela.sizePolicy().hasHeightForWidth())
        self.tela.setSizePolicy(sizePolicy)
        self.tela.setMinimumSize(QtCore.QSize(300, 200))
        self.tela.setSizeIncrement(QtCore.QSize(0, 0))
        self.tela.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.tela.setFrameShadow(QtWidgets.QFrame.Raised)
        self.tela.setObjectName("tela")
        self.gridLayout.addWidget(self.tela, 0, 0, 1, 6)
        self.boxA = QtWidgets.QLineEdit(self.centralwidget)
        self.boxA.setStyleSheet("background-color: rgb(89, 89, 89);")
        self.boxA.setObjectName("boxA")
        self.gridLayout.addWidget(self.boxA, 3, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setEnabled(False)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 339, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setEnabled(False)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        MainWindow.setTabOrder(self.boxA, self.boxB)
        MainWindow.setTabOrder(self.boxB, self.boxC)
        MainWindow.setTabOrder(self.boxC, self.ok)
        self.boxA.setFocus()
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #! END THE QT
        self.derivada = 0
        self.derivada = 0
        self.lista = []
        self.primeiravez = 1
        self.raiz1 = 0
        self.raiz2 = 0
        self.delta = 0

        # ? funï¿½oes

        self.ok.clicked.connect(self.equacao)

        # ? END funcs

    def equacao(self):
        self.boxA.setText(str(eval(self.boxA.text())))
        self.boxB.setText(str(eval(self.boxB.text())))
        self.boxC.setText(str(eval(self.boxC.text())))

        self.pegarderivada()
        print("Equacao: "+self.boxA.text()+self.xquadrado.text() +
              self.boxB.text()+self.xmais.text()+self.boxC.text()+" = " + 'y')
        self.pegarvertice(self.derivada)
        print("y =", self.derivada)
        self.delta = ((float(self.boxB.text())**2) +
                      (- 4 * float(self.boxA.text()) * float(self.boxC.text())))
        self.printgraph()

    def pegarderivada(self):
        self.derivada = -float(self.boxB.text()) / (2 * float(self.boxA.text()))
        print("Derivada", self.derivada)

    def pegarvertice(self, x):
        self.vertice = (((x**2)*(float(self.boxA.text()))) +
                        (float(self.boxB.text()) * x) + float(self.boxC.text()))

    def pegary(self, x):
        return (((x**2)*float(self.boxA.text()))) + (float(self.boxB.text()) * x) + (float(self.boxC.text()))

    def pegarraiz(self):
        if self.delta > 0:
            print('delta')
            self.raiz1 = (-float(self.boxB.text()) +
                          (np.sqrt(self.delta)))/(float(self.boxA.text())*2)
            self.raiz2 = (-float(self.boxB.text()) -
                          (np.sqrt(self.delta)))/(float(self.boxA.text())*2)

    def printgraph(self):
        self.lista = np.linspace(-10+self.derivada, +10+self.derivada, 40)
        listay = self.pegary(self.lista)
        print(self.lista, self.derivada)

        if self.primeiravez == 1:

            self.sc = MplCanvas(self, width=5, height=4, dpi=100)
            self.sc.figure.patch.set_facecolor((0.12157, 0.12157, 0.12157))
            self.pegarraiz()
            self.sc.axes.plot(self.lista, listay)

            self.sc.axes.plot(self.lista, listay*0, color='white')
            if( -np.amin(listay)> np.amax( listay)):
                self.sc.axes.plot(self.lista*0, np.linspace(-np.amin(listay),
                              np.amin(listay), len(listay)), color='white')

            else:

                self.sc.axes.plot(self.lista*0, np.linspace(-np.amax(listay),
                                np.amax(listay), len(listay)), color='white')
            self.sc.axes.scatter(self.derivada, self.vertice,
                                 color="red", label=('Vertice '+str(self.derivada)+','+str(self.vertice)))
            if self.delta > 0:
                self.sc.axes.scatter(self.raiz1, 0,  color="blue", label='Raiz '+str(
                    np.round(self.raiz1, 2))+','+str(np.round(self.raiz2, 2)))
                self.sc.axes.scatter(self.raiz2, 0,  color="blue")
            self.vbl = QtWidgets.QVBoxLayout(self.tela)
            self.sc.axes.set_facecolor((0.12157, 0.12157, 0.12157))
            self.sc.axes.spines['left'].set_color('white')
            self.sc.axes.spines['right'].set_color('white')
            self.sc.axes.spines['top'].set_color('white')
            self.sc.axes.spines['bottom'].set_color('white')
            self.sc.axes.tick_params(axis='x', colors='white')
            self.sc.axes.tick_params(axis='y', colors='white')
            self.sc.axes.yaxis.label.set_color(color='white')
            self.sc.axes.legend()
            self.primeiravez = 0
        else:
            print('here')
            self.pegarraiz()
            self.sc.axes.cla()

            self.sc.axes.plot(self.lista, listay)
            self.sc.axes.plot(self.lista, listay*0, color='white')
            if( -np.amin(listay)> np.amax( listay)):
                self.sc.axes.plot(self.lista*0, np.linspace(-np.amin(listay),
                              np.amin(listay), len(listay)), color='white')

            else:

                self.sc.axes.plot(self.lista*0, np.linspace(-np.amax(listay),
                                np.amax(listay), len(listay)), color='white')
            self.sc.axes.scatter(self.derivada, self.vertice,
                                 color="red", label=('Vertice '+str(self.derivada)+','+str(self.vertice)))
            if self.delta > 0:
                self.sc.axes.scatter(self.raiz1, 0,  color="blue", label='Raiz '+str(
                    np.round(self.raiz1, 2))+','+str(np.round(self.raiz2, 2)))
                self.sc.axes.scatter(self.raiz2, 0,  color="blue")

            self.sc.axes.plot(self.lista, listay*0, color='white')
            self.sc.axes.plot(self.lista*0, np.linspace(-np.amax(listay),
                              np.amax(listay), len(listay)), color='white')
            self.sc.axes.legend()
            self.sc.draw()

        self.vbl.addWidget(self.sc)


#
#
#
#
#
#
#
#
#


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.textC.setText(_translate("MainWindow", "C"))
        self.xquadrado.setText(_translate("MainWindow", "xÂ² +"))
        self.ok.setText(_translate("MainWindow", "Ok"))
        self.xmais.setText(_translate("MainWindow", "x + "))
        self.textB.setText(_translate("MainWindow", "B"))
        self.textA.setText(_translate("MainWindow", "A"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
